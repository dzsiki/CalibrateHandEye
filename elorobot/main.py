import numpy as np
import pose_estimation
from scipy.spatial.transform import Rotation as R
'''
    CONST robtarget HOME:=[[465,0,577],[0.5,0.5,-0.5,-0.5],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_10:=[[525.6230202,0,577.000009295],[0.500000007,0.499999993,-0.499999993,-0.500000007],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_20:=[[402.859091557,0,577.000005921],[0.500000011,0.499999989,-0.499999989,-0.500000011],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_30:=[[465.00000855,36.398472443,577.000007438],[0.499999999,0.500000001,-0.500000001,-0.499999999],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_40:=[[465.000008682,-52.389891706,577.000007427],[0.499999999,0.500000001,-0.500000001,-0.499999999],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_50:=[[465.000014898,-0.000003285,577.000008282],[0.65328146,0.653281474,-0.270598105,-0.27059807],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_60:=[[465.000013758,-0.000003259,689.603668819],[0.653281461,0.653281472,-0.270598102,-0.270598074],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_70:=[[464.999903399,-0.000084278,654.013225354],[0.549775436,0.549775145,-0.444687495,-0.444687859],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_80:=[[465.000017469,0,518.588114055],[0.499999984,0.500000016,-0.500000016,-0.499999984],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_90:=[[223.720519822,0,577.000022344],[0.40702917,0.578210389,-0.578210389,-0.40702917],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_100:=[[465.000006784,-131.288498433,577.000006137],[0.438979373,0.554343859,-0.438979366,-0.554343857],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_110:=[[465.000012801,119.17600901,577.000007996],[0.630657968,0.531203949,-0.430896624,-0.366634684],[0,-1,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
masodik
'''

'''
  CONST robtarget Target_10:=[[465,0,400],[0.5,0.5,-0.5,-0.5],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_20:=[[465.0000113,-30.243250045,399.999992152],[0.499999993,0.500000007,-0.500000008,-0.499999992],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_30:=[[465.000009972,52.492724239,399.99998658],[0.499999987,0.500000013,-0.50000001,-0.49999999],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_40:=[[508.088540285,52.492721365,399.99999094],[0.499999983,0.500000017,-0.500000013,-0.499999987],[0,0,0,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    CONST robtarget Target_50:=[[429.270501694,-23.499479351,399.999985302],[0.500000011,0.499999989,-0.499999988,-0.500000012],[-1,0,-1,0],[9E+09,9E+09,9E+09,9E+09,9E+09,9E+09]];
    harmadik
'''
'''
    [[465,0,577],[0.5,0.5,-0.5,-0.5]], #home
    [[566.377400345,0,577.000009604],[0.499999899,0.500000101,-0.500000101,-0.499999899]],
    [[566.377406182,160.580599277,577.000000982],[0.546919037,0.546919266,-0.448195856,-0.448195669]],
    [[566.377402801,-168.242098528,577.000013095],[0.499999892,0.500000112,-0.500000113,-0.499999883]], #3 szar
    [[566.377398164,-168.242097338,690.303019159],[0.499999893,0.500000103,-0.500000108,-0.499999896]],
    [[629.132835436,62.027131383,634.578231843],[0.433730773,0.558460042,-0.558460042,-0.433730769]], # 5 szar
    [[511.852684061,62.027131061,517.887161496],[0.499999894,0.500000106,-0.500000106,-0.499999894]],
    [[569.073014615,62.027176419,517.887163124],[0.640514914,0.640515075,-0.299567303,-0.299567214]],
    [[569.073021988,62.027173462,656.092863787],[0.640514909,0.640515092,-0.299567307,-0.299567182]],
    [[578.88650006,17.504390595,667.6077697],[0.705317705,0.705318,-0.050266568,-0.050266558]],
    [[464.999998087,-204.422914887,646.551359567],[0.345009309,0.61722652,-0.345009313,-0.617226518]],
    [[325.686415838,0,577.00000955],[0.30755358,0.636718773,-0.636718773,-0.30755358]]
    elso
'''


elotargets = [
    [[566.377400345,0,577.000009604],[0.499999899,0.500000101,-0.500000101,-0.499999899]],
    [[566.377406182,160.580599277,577.000000982],[0.546919037,0.546919266,-0.448195856,-0.448195669]],
    [[566.377398164,-168.242097338,690.303019159],[0.499999893,0.500000103,-0.500000108,-0.499999896]],
    [[511.852684061,62.027131061,517.887161496],[0.499999894,0.500000106,-0.500000106,-0.499999894]],
    [[569.073014615,62.027176419,517.887163124],[0.640514914,0.640515075,-0.299567303,-0.299567214]],
    [[569.073021988,62.027173462,656.092863787],[0.640514909,0.640515092,-0.299567307,-0.299567182]],
    [[578.88650006,17.504390595,667.6077697],[0.705317705,0.705318,-0.050266568,-0.050266558]],
    [[464.999998087,-204.422914887,646.551359567],[0.345009309,0.61722652,-0.345009313,-0.617226518]],
    [[325.686415838,0,577.00000955],[0.30755358,0.636718773,-0.636718773,-0.30755358]]
]

#print(R.from_quat([0.499999899, 0.500000101, -0.500000101, -0.499999899]).as_matrix())

poses = []
rots = []

for target in elotargets:
    poses.append(target[0])
    rots.append(R.from_quat(target[1]).as_matrix().flatten().tolist())


demo_positions = [
    [0.465, 0.0005, 0.5768],
    [0.465, 0.0005, 0.6641],
    [0.465, 0.0005, 0.5144],
    [0.4651, -0.089, 0.5765],
    [0.4651, -0.0578, 0.5765],
    [0.4651, 0.0477, 0.5765],
    [0.4651, 0.0633, 0.5765],
    [0.4814, 0.0003, 0.5765],
    [0.4376, 0.0003, 0.5765],
    [0.4376, 0.0628, 0.5765],
    [0.4466, -0.0827, 0.5765],
    [0.4729, -0.0827, 0.5765],
    [0.4729, 0.059, 0.5765],
    [0.4856, -0.0853, 0.7126],
 ]

#for idx,foo in enumerate(demo_positions):
#    demo_positions[idx] = [foo[2],foo[1],foo[0]]
#XYZ
demo_rotations = [
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #A
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #b
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #c
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #d
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #e
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #f
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #g
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #h
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #i
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #j
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #k
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #l
    [-1, 0, 0, 0, 1, 0, 0, 0, -1], #m
    [-0.7071068, 0.7071068, -0.0000000,
0.7071068, 0.7071068, -0.0000000,
0.0000000, -0.0000000, -1.0000000]

 ]
#zyx
demo_rotations2 = [
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, 0, 0, 0, 1, 0],
    [0.7071068,  0.0000000,  -0.7071068, -0.7071068,  0.0000000, -0.7071068, -0.0000000,  1.0000000,  0.0000000]
 ]


mtx, dist, R_cam2gripper, t_cam2gripper = pose_estimation.findpose(True, poses, rots)

R_base2object, t_base2object = pose_estimation.worldposecalc("~0.png", True, mtx, dist, rots[0],
                                                             poses[0], R_cam2gripper, t_cam2gripper)
print(t_base2object)
'''
mtx, dist, R_cam2gripper, t_cam2gripper = pose_estimation.findpose(False, demo_positions, demo_rotations)

R_base2object, t_base2object = pose_estimation.worldposecalc("~0.png", False, mtx, dist, demo_rotations[0],
                                                             demo_positions[0], R_cam2gripper, t_cam2gripper)
print(t_base2object)

mtx, dist, R_cam2gripper, t_cam2gripper = pose_estimation.findpose(True, demo_positions, demo_rotations2)

R_base2object, t_base2object = pose_estimation.worldposecalc("~0.png", True, mtx, dist, demo_rotations2[0],
                                                             demo_positions[0], R_cam2gripper, t_cam2gripper)
print(t_base2object)

mtx, dist, R_cam2gripper, t_cam2gripper = pose_estimation.findpose(False, demo_positions, demo_rotations2)

R_base2object, t_base2object = pose_estimation.worldposecalc("~0.png", False, mtx, dist, demo_rotations2[0],
                                                             demo_positions[0], R_cam2gripper, t_cam2gripper)
print(t_base2object)
'''